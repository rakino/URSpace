:PROPERTIES:
:ID:       f419308f-3356-4379-a098-48b7f7f9d6ea
:END:
#+AUTHOR: Hilton Chain
#+HUGO_BASE_DIR: .
#+OPTIONS: d:t

* DONE 時隔一年的桌面 Guix System 安裝                          :Guix:@notes:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: system-setup-2024
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image cover.jpg
:ID:       4fd743cf-2dcc-4b4f-af9e-88fd1e145e69
:END:
:LOGBOOK:
- State "DONE"       from "DONE"       [2025-01-01 Wed 10:10]
- State "DONE"       from "DONE"       [2024-09-30 Mon 18:44]
- State "DONE"       from "DONE"       [2024-09-22 Sun 20:29]
- State "DONE"       from "DOING"      [2024-02-27 Tue 16:17]
- State "DOING"      from "DONE"       [2024-02-27 Tue 16:17]
- State "DONE"       from "DOING"      [2024-02-24 Sat 14:04]
- State "DOING"      from "DONE"       [2024-02-24 Sat 14:04]
- State "DONE"       from "DOING"      [2024-02-24 Sat 11:38]
- State "DOING"      from "DONE"       [2024-02-24 Sat 11:38]
- State "DONE"       from "TODO"       [2024-02-24 Sat 01:14]
:END:
#+begin_description
再有下次，怕是成本不低了。
#+end_description

雖說輾轉中我才[[id:488ed9b9-649d-4c4e-8543-6c259c503f54][提到]]「那時完成的系統如今還在使用」，不過隨着媒體文件存量增長，爲 Guix System 留下的 1TiB 存儲空間也逐漸捉襟見肘了起來。

這倒不是說 Guix 本身存儲佔用有多可怕：在我此前的桌面系統中，/gnu/store 佔有 115GiB（壓縮[fn:1]前 241GiB），約 10%，（本文中將完成的系統剛安裝好時在 7GiB 左右），而另一臺使用中的服務器，我有在維護體積，則是 3GiB。機制使然，談不上輕量，但也尚可接受。

我的筆記本電腦只有一個硬盤位，目前安裝了 2TB 的硬盤，要想替換到更大容量，價格上並不理想。這次設置系統，主要是去掉曾留給 Windows 的分區，此外分區表仍有微調，因此重新安裝難以避免。

關於 GNU Guix 的資料並不算多，中文則更少，想到上次安裝詳情並不完整也未公開發布，不免遺憾。如今我便將其寫作博文，以期爲後來者參考。

這次安裝是在 x86_64 UEFI 系統上的手動安裝，會用到 GRUB 引導加載器，也會設置 LUKS2 加密分區並在其上創建 Btrfs 文件系統。如果對手動安裝不夠熟悉，可以同時參閱 ArchWiki 上 Arch Linux 的[[https://wiki.archlinux.org/title/Installation_guide][安裝指南]]，在基礎上相通。無論路徑如何，實現相同效果就好了。

** 預備
:PROPERTIES:
:ID:       832d5b6c-8961-44d3-9b3b-b6b77f68c365
:END:
Guix System 的安裝，只要求先設置好 Guix 程序。不過我有重新分區的需要，所以得在 LiveCD 環境進行，但 Guix System 的 LiveCD 在需要非自由固件時較爲費神，因此我沿用了上次的選擇——Ubuntu LiveCD，啓動方面則是藉助 [[https://www.ventoy.net/cn/index.html][Ventoy]]。

備份上，我正好有一塊 1TB 的閒置硬盤，所幸留給 Guix System 的是 1TiB，除去 /gnu/store 還有完整備份的餘地，再有下次，恐怕會麻煩不少了。

此外內核與固件來自 [[https://gitlab.com/nonguix/nonguix][Nonguix]]，在遠東並無鏡像，可能需要注意網絡代理。

** 安裝環境
進入 LiveCD 後，首先進行一些基本設置，如網絡、顯示縮放、時區等。

*** 登入 root
:PROPERTIES:
:ID:       0e760bfd-bc33-4d3b-ac21-460c82bc0b59
:END:
安裝過程中大多命令需要較高權限，所以下文默認使用 root 用戶。
#+begin_src shell
  sudo --login --user=root
#+end_src

*** 鍵盤佈局
:PROPERTIES:
:ID:       19bec67c-9a71-42f8-9b51-1122122821fc
:END:
我的鍵盤佈局是 Dvorak，之後[[id:5a0400dc-f389-4f42-84c4-b454b8f52709][設置 LUKS 分區]]密碼時，爲規避可能的 GRUB 設置問題，會回到 QWERTY 佈局一次，所以兩者一併提及。

Ubuntu LiveCD 的桌面環境是 Xorg 上的 GNOME，鍵盤佈局可以用 setxkbmap 設置。
#+begin_src shell
  # 使用 Dvorak 佈局，並將 CapsLock 改爲 Ctrl。
  setxkbmap us dvorak ctrl:nocaps

  # 回到 QWERTY 佈局
  setxkbmap us
#+end_src

如果是在控制檯下則可使用 loadkeys，不過不能額外設置選項。
#+begin_src shell
  # 使用 Dvorak 佈局
  loadkeys dvorak

  # 回到 QWERTY 佈局
  loadkeys us
#+end_src

*** 安裝 Guix
安裝 Guix 推薦使用安裝腳本，不過如果軟件包管理器中提供了 1.4.0 版本，也應當可以使用。
#+begin_src shell
  cd /tmp
  wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh

  # 由 ftp.gnu.org 下載可能較慢，這裏將下載源改至 BFSU 鏡像站。
  sed --in-place 's/ftp.gnu.org/mirrors.bfsu.edu.cn/g' guix-install.sh

  chmod +x guix-install.sh
  ./guix-install.sh
#+end_src

安裝會向 /etc/profile.d 添加配置文件，所以需要重新[[id:0e760bfd-bc33-4d3b-ac21-460c82bc0b59][登錄]]。

Guix 由 guix-daemon 和 guix 兩個程序組成，前者由 root 運行，負責基礎管理功能，後者可以由非特權用戶運行，提供其餘絕大部分功能。

*** 設置 Guix
**** 頻道
:PROPERTIES:
:ID:       4914f342-995a-4821-a1c3-e2382c834d35
:END:
Guix 程序是由多個頻道組成的（默認僅包含官方倉庫一個頻道），更新 Guix 大致上就是拉取頻道更新、編譯頻道，再將產物合成爲新的 Guix 程序。這個編譯過程最高會用到 4GiB 內存，所以要想日常使用 Guix，至少得有一臺機器內存足夠。

我會添加 Nonguix 和 [[https://github.com/rakino/Rosenthal][Rosenthal]] 兩個頻道，前者在[[id:832d5b6c-8961-44d3-9b3b-b6b77f68c365][預備]]中提過，包含原始 Linux 內核與非自由固件，後者是我自己的頻道，有提供支持 Argon2（LUKS2 默認使用）的 GNU GRUB 引導加載器變體。

頻道配置文件默認路徑爲 ~/.config/guix/channels.scm 和 /etc/guix/channels.scm，前者優先級更高。爲了指代方便，本文選擇其中之一：/etc/guix/channels.scm。
#+begin_src scheme
  ;; /etc/guix/channels.scm 由此開始：
  (list (channel
         (name 'guix)
         ;; 這裏用了 SJTUG 的鏡像，頻道中有記錄原始地址，使用鏡像時，更新會有 warning
         (url "https://mirror.sjtu.edu.cn/git/guix.git")
         (introduction
          (make-channel-introduction
           ;; Guix 程序會從這條 commit 開始驗證 OpenPGP 簽名
           "9edb3f66fd807b096b48283debdcddccfea34bad"
           (openpgp-fingerprint
            "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
        (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix")
         (introduction
          (make-channel-introduction
           "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
           (openpgp-fingerprint
            "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
        (channel
         (name 'rosenthal)
         (url "https://codeberg.org/hako/rosenthal.git")
         ;; 頻道以 Git 倉庫的形式存在，需要設置分支，默認爲 "master"，所以前兩個頻道沒有設置
         (branch "trunk")
         (introduction
          (make-channel-introduction
           "7677db76330121a901604dfbad19077893865f35"
           (openpgp-fingerprint
            "13E7 6CD6 E649 C28C 3385  4DF5 5E5A A665 6149 17F7")))))
  ;; /etc/guix/channels.scm 在此結束。
#+end_src

**** 二進制替代
Guix 的頻道只負責分發定義，而不包含產物，但因爲產物的輸出路徑唯一，且在構建前已知，也就有了從網絡上獲取已構建產物作爲替代的機制。

例如用我當前的 Guix 程序構建 GNU Hello，產物爲：
#+begin_example
/gnu/store/6fbh8phmp3izay6c0dpggpxhcjn4xlm5-hello-2.12.1
#+end_example

如果替代服務器上存在這個產物，Guix 就可以直接下載，反之則在本地構建。

Guix 默認替代服務器爲 <https://bordeaux.guix.gnu.org> 和 <https://ci.guix.gnu.org>，二者獨立運行。SJTUG 有提供後者鏡像。

Nonguix 也有替代服務器，不過 Guix 在傳輸產物時必須簽名與驗證，所以首先需要授權 Nonguix 的公鑰：
#+begin_src shell
  cd /tmp
  wget https://substitutes.nonguix.org/signing-key.pub

  guix archive --authorize < signing-key.pub
#+end_src

（安裝 guix 時會在 /etc/guix 下生成一對密鑰：signing-key.pub 和 signing-key.sec，已認證的公鑰則記錄在 /etc/guix/acl 中。）

之後需要設置 guix-daemon。
#+begin_src shell
  systemctl edit --full guix-daemon.service
#+end_src

對其 systemd 配置文件 ExecStart 部分改動如下，除官方服務器外，添加 SJTUG 鏡像與 Nonguix。因爲查詢二進制替代有先後順序，所以建議鏡像優先，其餘按命中率由高到低排序：
#+begin_src diff
  diff --git a/guix.daemon.service b/guix.daemon.service
  index b0f9237..a60232e 100644
  --- a/guix.daemon.service
  +++ b/guix.daemon.service
  @@ -7,7 +7,11 @@ Description=Build daemon for GNU Guix

   [Service]
   ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon \
  -    --build-users-group=guixbuild --discover=yes
  +    --build-users-group=guixbuild --discover=yes \
  +    --substitute-urls='https://mirror.sjtu.edu.cn/guix \
  +                       https://bordeaux.guix.gnu.org \
  +                       https://ci.guix.gnu.org \
  +                       https://substitutes.nonguix.org'
   Environment='GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale' LC_ALL=en_US.utf8
   StandardOutput=syslog
   StandardError=syslog
#+end_src

如果需要爲 guix-daemon 設置代理，則修改 Environment 部分如下，增加 http_proxy 和 https_proxy 環境變量，用於構建過程中的源碼獲取及替代下載：
#+begin_src diff
  diff --git a/guix.daemon.service b/guix.daemon.service
  index a60232e..c3a593c 100644
  --- a/guix.daemon.service
  +++ b/guix.daemon.service
  @@ -12,6 +12,7 @@ ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon \
                          https://bordeaux.guix.gnu.org \
                          https://ci.guix.gnu.org \
                          https://substitutes.nonguix.org'
  -Environment='GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale' LC_ALL=en_US.utf8
  +Environment='GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale' LC_ALL=en_US.utf8 \
  +            'http_proxy=http://127.0.0.1:1080' 'https_proxy=http://127.0.0.1:1080'
   StandardOutput=syslog
   StandardError=syslog
#+end_src

隨後重啓 guix-daemon。
#+begin_src shell
  systemctl restart guix-daemon.service
#+end_src

作爲對比，要在 Guix System 中完成這些設置大致如下：
#+begin_src scheme
  (service guix-service-type
           (guix-configuration
            (authorized-keys
             (append (list (plain-file
                            "nonguix-signing-key.pub" ;Nonguix 公鑰文件內容。
                            "(public-key (ecc (curve Ed25519) (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)))"))
                     %default-authorized-guix-keys))
            (channels
             (list (channel
                    (name 'guix)
                    (url "https://mirror.sjtu.edu.cn/git/guix.git")
                    (introduction
                     (make-channel-introduction
                      "9edb3f66fd807b096b48283debdcddccfea34bad"
                      (openpgp-fingerprint
                       "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
                   (channel
                    (name 'nonguix)
                    (url "https://gitlab.com/nonguix/nonguix")
                    (introduction
                     (make-channel-introduction
                      "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
                      (openpgp-fingerprint
                       "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
                   (channel
                    (name 'rosenthal)
                    (url "https://codeberg.org/hako/rosenthal.git")
                    (branch "trunk")
                    (introduction
                     (make-channel-introduction
                      "7677db76330121a901604dfbad19077893865f35"
                      (openpgp-fingerprint
                       "13E7 6CD6 E649 C28C 3385  4DF5 5E5A A665 6149 17F7"))))))
            ;; 代理設置
            (http-proxy "http://127.0.0.1:1080")
            (substitute-urls
             (append (list "https://mirror.sjtu.edu.cn/guix")
                     %default-substitute-urls
                     (list "https://substitutes.nonguix.org")))))
#+end_src

*** 更新 Guix
下一步便是更新，更新時會先拉取頻道，這部分如需設置代理，則在當前環境設置 http_proxy 和 https_proxy，如下：
#+begin_src shell
  export http_proxy=http://127.0.0.1:1080
  export https_proxy=$http_proxy
#+end_src

萬事具備，更新！
#+begin_src shell
  guix pull
#+end_src

更新後，當前用戶的 Guix 程序會被鏈接到 ~/.config/guix/current。例如對於 root 用戶， =which guix= 命令的結果應爲：
#+begin_example
/root/.config/guix/current/bin/guix
#+end_example

如果沒有類似結果，嘗試重新[[id:0e760bfd-bc33-4d3b-ac21-460c82bc0b59][登錄]]或執行 =hash guix= ，確保之後會運行的 Guix 程序爲 ~/.config/guix/current/bin/guix 既可。

** 文件系統
分區和文件系統在安裝好系統後再修改會比較麻煩，應當最爲注意，不過本文並不會特別涉及。

*** 分區表
如前述：
#+begin_quote
這次安裝是在 x86_64 UEFI 系統上的手動安裝，會用到 GRUB 引導加載器，也會設置 LUKS2 加密分區並在其上創建 Btrfs 文件系統。
#+end_quote

因此我計劃在硬盤上創建兩個分區：256MiB 用作 EFI 系統分區，剩餘部分用以 LUKS 加密。

分區使用 fdisk，結果如下：
#+begin_example
  Disk /dev/nvme0n1: 1.82 TiB, 2000398934016 bytes, 3907029168 sectors
  Disk model: Samsung SSD 970 EVO Plus 2TB
  Units: sectors of 1 * 512 = 512 bytes
  Sector size (logical/physical): 512 bytes / 512 bytes
  I/O size (minimum/optimal): 512 bytes / 512 bytes
  Disklabel type: gpt
  Disk identifier: ED118402-2913-49AC-8F20-4A50678BE202

  Device          Start        End    Sectors  Size Type
  /dev/nvme0n1p1   2048     526335     524288  256M EFI System
  /dev/nvme0n1p2 526336 3907028991 3906502656  1.8T Linux filesystem
#+end_example

分區過程中可能會注意到一些像是「Linux root (x86-64)」的類型，這些類型來自 [[https://uapi-group.org/specifications/specs/discoverable_partitions_specification/][Discoverable Partitions Specification]]，用於啓動時自動掛載工具，除此同 fdisk 默認「Linux filesystem」無異。

*** EFI 系統分區（FAT32）
#+begin_src shell
  mkfs.fat -F 32 /dev/nvme0n1p1
#+end_src

*** LUKS 分區（Btrfs）
:PROPERTIES:
:ID:       5a0400dc-f389-4f42-84c4-b454b8f52709
:END:
在 =cryptsetup --help= 輸出尾端可以看到各項參數預設。
#+begin_example
  <...>
  Default compiled-in metadata format is LUKS2 (for luksFormat action).

  Default compiled-in key and passphrase parameters:
          Maximum keyfile size: 8192kB, Maximum interactive passphrase length 512 (characters)
  Default PBKDF for LUKS1: pbkdf2, iteration time: 2000 (ms)
  Default PBKDF for LUKS2: argon2id
          Iteration time: 2000, Memory required: 1048576kB, Parallel threads: 4

  Default compiled-in device cipher parameters:
          loop-AES: aes, Key 256 bits
          plain: aes-cbc-essiv:sha256, Key: 256 bits, Password hashing: ripemd160
          LUKS: aes-xts-plain64, Key: 256 bits, LUKS header hashing: sha256, RNG: /dev/urandom
          LUKS: Default keysize with XTS mode (two internal keys) will be doubled.
#+end_example

預設對我來說已經足夠好了，不過 XTS 模式[[https://en.wikipedia.org/wiki/Disk_encryption_theory#XTS_weaknesses][缺乏數據驗證]]，建議配合自帶數據校驗的文件系統使用，正好我之後會用 Btrfs。

#+begin_src shell
  cryptsetup luksFormat --type=luks2 /dev/nvme0n1p2
#+end_src

GRUB 會在開機時解鎖 LUKS 分區，但使用的鍵盤佈局卻可能是 QWERTY，可以新增一個在 QWERTY 下按鍵相同的密碼來規避此類問題。

（由於新增密碼時需要輸入已有密碼，所以注意先輸入，再新開終端[[id:19bec67c-9a71-42f8-9b51-1122122821fc][切換佈局]]。）
#+begin_src shell
  cryptsetup luksAddKey /dev/nvme0n1p2
#+end_src

解鎖 LUKS 分區時需要一個名字，解鎖後的分區會出現在 /dev/mapper/<名字>。
#+begin_src shell
  cryptsetup open /dev/nvme0n1p2 encrypted
#+end_src

將解鎖後的 LUKS 分區格式化爲 Btrfs 文件系統。
#+begin_src shell
  mkfs.btrfs /dev/mapper/encrypted
#+end_src

掛載文件系統並創建 Btrfs 子卷。
#+begin_src shell
  mkdir --parents /media/encrypted

  mount --options compress=zstd \
        /dev/mapper/encrypted /media/encrypted

  btrfs subvolume create /media/encrypted/@Data
  btrfs subvolume create /media/encrypted/@Home
  btrfs subvolume create /media/encrypted/@Snapshot
  btrfs subvolume create /media/encrypted/@System
  btrfs subvolume create /media/encrypted/@System/@Guix
#+end_src

由此創建的 Btrfs 子卷佈局如下，子卷名可以是任何合法文件名， =@= 在此沒有特殊含義：
#+begin_example
  /media/encrypted/
  ├── @Data
  ├── @Home
  ├── @Snapshot
  └── @System
      └── @Guix
#+end_example

我會將 =@System/@Guix= 掛載到 /， =@Data= 掛載到 /var/lib， =@Home= 掛載到 /home，而先前設置的 EFI 系統分區則會被掛載到 /efi。

我的安裝過程將在 /mnt 下進行，這裏掛載文件系統到對應位置：
#+begin_src shell
  mount --options compress=zstd,subvol=@System/@Guix \
        /dev/mapper/encrypted /mnt

  mkdir --parents /mnt{/efi,/var/lib,/home}

  mount /dev/nvme0n1p1 /mnt/efi

  mount --options compress=zstd,subvol=@Data \
        /dev/mapper/encrypted /mnt/var/lib
  mount --options compress=zstd,subvol=@Home \
        /dev/mapper/encrypted /mnt/home
#+end_src

作爲對比，以上 LUKS 分區解鎖和掛載點配置，在 Guix System 中如下：
#+begin_src scheme
  (mapped-devices
   (list (mapped-device
          (source "/dev/nvme0n1p2")
          (target "encrypted")
          (type luks-device-mapping))))
#+end_src

（dependencies 處的 mapped-devices 就是上述 LUKS 分區解鎖配置，後面[[id:f6664150-040a-4d9b-9628-4bce4b27a0bb][設置 & 安裝]]部分完整配置文件中也會提到。）
#+begin_src scheme
  (file-systems
   (list (file-system
           (type "btrfs")
           (mount-point "/")
           (device "/dev/mapper/encrypted")
           (options "compress=zstd,subvol=@System/@Guix")
           (create-mount-point? #t)
           (dependencies mapped-devices))

         (file-system
           (type "fat")
           (mount-point "/efi")
           (device "/dev/nvme0n1p1")
           (create-mount-point? #t))

         (file-system
           (type "btrfs")
           (mount-point "/var/lib")
           (device "/dev/mapper/encrypted")
           (options "compress=zstd,subvol=@Data")
           (check? #f)
           (create-mount-point? #t)
           (dependencies mapped-devices))

         (file-system
           (type "btrfs")
           (mount-point "/home")
           (device "/dev/mapper/encrypted")
           (options "compress=zstd,subvol=@Home")
           (check? #f)
           (create-mount-point? #t)
           (dependencies mapped-devices))))
#+end_src

上述掛載點配置其實還可以減少一些重複，當然以下內容只是演示，並不會在本文涉及：
#+begin_src scheme
  (file-systems
   (let ((file-system-base (file-system
                             (type "btrfs")
                             (mount-point "/")
                             (device "/dev/mapper/encrypted")
                             (create-mount-point? #t)
                             (dependencies mapped-devices)))
         (options-for-subvolume
          (cut string-append "compress=zstd,subvol=" <>)))
     (append
      (list (file-system
              (type "fat")
              (mount-point "/efi")
              (device "/dev/nvme0n1p1")
              (create-mount-point? #t)))
      (map (match-lambda
             ((subvolume . mount-point)
              (file-system
                (inherit file-system-base)
                (mount-point mount-point)
                (options (options-for-subvolume subvolume))
                (check? (string=? "/" mount-point)))))
           '(("@System/@Guix" . "/")
             ("@Data"         . "/var/lib")
             ("@Home"         . "/home"))))))
#+end_src

** Guix System 設置 & 安裝
:PROPERTIES:
:ID:       f6664150-040a-4d9b-9628-4bce4b27a0bb
:END:
終於來到正題了，Guix System 的設置和前面的頻道十分相像，都還算直觀。不過一些 Scheme 基礎如列表操作難以避免，因此我限制了配置文件中的 Scheme 含量，[[id:3322285f-9639-4807-9fd4-b606374fd8f0][在附錄中也有簡單解釋]]。

*** 配置文件
:PROPERTIES:
:ID:       c001599b-9683-4cbd-b88c-71ac0170b79f
:END:
下面大體上是我這次安裝使用的系統配置文件，使用了 GNOME 桌面環境，對於初次設置還算方便，至少開機能夠上網，還帶有基礎工具。如果未來系統設置出現問題，也能回滾到一個能工作的狀態。鍵盤佈局和代理的部分註釋掉了，可以根據情況取消註釋，在引導加載器、文件系統以及用戶設置上稍作調整就可以直接使用。

配置文件可以是任何名字，也可以保存到任意位置，爲了指代方便，本文選擇 /etc/config.scm。
#+begin_src scheme
  ;; /etc/config.scm 由此開始：
  ;; Guix 頻道中的功能，是以模塊的形式提供的。
  (use-modules (gnu)
               (guix channels)
               (gnu packages fonts)
               (gnu services xorg)
               (gnu services desktop)
               (nongnu packages linux)
               (nongnu system linux-initrd)
               (rosenthal bootloader grub))

  ;; https://guix.gnu.org/manual/devel/en/guix.html#Using-the-Configuration-System
  ;; https://guix.gnu.org/manual/devel/en/guix.html#operating_002dsystem-Reference
  (operating-system
    (host-name "dorphine")
    (timezone "Asia/Hong_Kong")
    (locale "en_US.utf8")

    ;; linux 是原始的 Linux 內核，包含使用非自由固件的驅動及非自由固件的加載功能，
    ;; linux-firmware 是非自由固件，二者在 (nongnu packages linux) 定義。
    ;; microcode-initrd 會創建一個包含 AMD 與 Intel 非自由微碼更新的 initrd，在
    ;; (nongnu system linux-initrd) 定義。
    (kernel linux)
    (firmware (list linux-firmware))
    (initrd microcode-initrd)

    ;; ;; 控制檯鍵盤佈局配置
    ;; (keyboard-layout
    ;;  ;; https://guix.gnu.org/manual/devel/en/guix.html#Keyboard-Layout
    ;;  (keyboard-layout "us" "dvorak" #:options (list "ctrl:nocaps")))

    ;; grub-efi-luks2-bootloader 是一個支持 Argon2 的 GRUB 引導加載器變體，在
    ;; (rosenthal bootloader grub) 定義。
    (bootloader
     ;; https://guix.gnu.org/manual/devel/en/guix.html#Bootloader-Configuration
     (bootloader-configuration
      (bootloader grub-efi-luks2-bootloader)
      ;; ;; 引導加載器鍵盤佈局配置
      ;; ;; 這裏的第一個 keyboard-layout 是 bootloader-configuration 配置
      ;; ;; 的一部分，第二個則是 bootloader 配置之前出現的同名配置。
      ;; (keyboard-layout keyboard-layout)
      (targets (list "/efi"))))

    (mapped-devices
     ;; https://guix.gnu.org/manual/devel/en/guix.html#Mapped-Devices
     (list (mapped-device
            (source "/dev/nvme0n1p2")
            (target "encrypted")
            (type luks-device-mapping))))

    (file-systems
     ;; https://guix.gnu.org/manual/devel/en/guix.html#File-Systems
     (append (list (file-system
                     (type "fat")
                     (mount-point "/efi")
                     (device "/dev/nvme0n1p1"))
                   (file-system
                     (type "btrfs")
                     (mount-point "/")
                     (device "/dev/mapper/encrypted")
                     (options "compress=zstd,subvol=@System/@Guix")
                     ;; 這裏的 mapped-devices 是 file-systems 配置之前出現的同名配置。
                     (dependencies mapped-devices))
                   (file-system
                     (type "btrfs")
                     (mount-point "/var/lib")
                     (device "/dev/mapper/encrypted")
                     (options "compress=zstd,subvol=@Data")
                     (check? #f)
                     (dependencies mapped-devices))
                   (file-system
                     (type "btrfs")
                     (mount-point "/home")
                     (device "/dev/mapper/encrypted")
                     (options "compress=zstd,subvol=@Home")
                     (check? #f)
                     (dependencies mapped-devices)))
             ;; %base-file-systems 包含一些用戶通常不會主動配置的文件系統，需要注
             ;; 意的是 % 其實並沒有任何特殊含義。
             ;; 操作系統的 file-systems 配置只需要一個列表，所以上面另外創建了一個
             ;; 列表，再用 append 把兩個列表合爲一個。
             %base-file-systems))

    (users
     ;; https://guix.gnu.org/manual/devel/en/guix.html#User-Accounts
     (append (list (user-account
                    (name "myuser")
                    (group "users")
                    (supplementary-groups (list "audio" "video" "wheel"))))
             %base-user-accounts))

    ;; font-google-noto 是一套支持所有語言的字體，由四個軟件包提供，其中 -emoji 爲
    ;; 表情符號，-sans-cjk 和 -serif-cjk 則包含漢字。
    (packages
     (append (list font-google-noto
                   font-google-noto-emoji
                   font-google-noto-sans-cjk
                   font-google-noto-serif-cjk)
             %base-packages))

    (services
     (append
      ;; https://guix.gnu.org/manual/devel/en/guix.html#Desktop-Services
      ;; https://guix.gnu.org/manual/devel/en/guix.html#X-Window
      (list (service gnome-desktop-service-type))
      (modify-services %desktop-services
        ;; modify-services 接受一個服務列表，其結果也是一個服務列表。
        ;; 將 %desktop-services 中 gdm-service-type 種類服務的原有配置綁定到
        ;; config（這個名字可以隨便起），「=>」 後面是 gdm-service-type 的新配置。
        (gdm-service-type
         config => (gdm-configuration
                    ;; gdm-service-type 的配置就是一個 gdm-configuration，
                    ;; 同種結構可以繼承。
                    (inherit config)
                    ;; (xorg-configuration
                    ;;  ;; https://guix.gnu.org/manual/devel/en/guix.html#index-Xorg_002c-configuration
                    ;;  (xorg-configuration
                    ;;   ;; Xorg 鍵盤佈局配置
                    ;;   (keyboard-layout keyboard-layout)))
                    (wayland? #t)))
        ;; https://guix.gnu.org/manual/devel/en/guix.html#index-guix_002dservice_002dtype
        (guix-service-type
         config => (guix-configuration
                    (inherit config)
                    (authorized-keys
                     ;; https://guix.gnu.org/manual/devel/en/guix.html#G_002dExpressions
                     (append (list (plain-file
                                    "nonguix-signing-key.pub" ;Nonguix 公鑰文件內容。
                                    "(public-key (ecc (curve Ed25519) (q #C1FD53E5D4CE971933EC50C9F307AE2171A2D3B52C804642A7A35F84F3A4EA98#)))"))
                             %default-authorized-guix-keys))
                    (channels
                     (list (channel
                            (name 'guix)
                            (url "https://mirror.sjtu.edu.cn/git/guix.git")
                            (introduction
                             (make-channel-introduction
                              "9edb3f66fd807b096b48283debdcddccfea34bad"
                              (openpgp-fingerprint
                               "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
                           (channel
                            (name 'nonguix)
                            (url "https://gitlab.com/nonguix/nonguix")
                            (introduction
                             (make-channel-introduction
                              "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
                              (openpgp-fingerprint
                               "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
                           (channel
                            (name 'rosenthal)
                            (url "https://codeberg.org/hako/rosenthal.git")
                            (branch "trunk")
                            (introduction
                             (make-channel-introduction
                              "7677db76330121a901604dfbad19077893865f35"
                              (openpgp-fingerprint
                               "13E7 6CD6 E649 C28C 3385  4DF5 5E5A A665 6149 17F7"))))))
                    ;; ;; 代理設置
                    ;; (http-proxy "http://127.0.0.1:1080")
                    (substitute-urls
                     (append (list "https://mirror.sjtu.edu.cn/guix")
                             %default-substitute-urls
                             (list "https://substitutes.nonguix.org")))))))))
  ;; /etc/config.scm 在此結束。
#+end_src

*** 安裝 Guix System
:PROPERTIES:
:ID:       b2af2d28-1831-41f4-8455-a8746778cd4a
:END:
安裝由 =guix system init= 進行，指定配置文件和安裝路徑就可以了。
#+begin_src shell
guix system init /etc/config.scm /mnt
#+end_src

在安裝上，會先構建引導加載器配置[fn:2]，而產物存放在 /gnu/store 下，對於 LiveCD 環境，文件系統存儲在內存，可能會內存不足。

Guix System LiveCD 的解決方案是 [[https://guix.gnu.org/manual/devel/en/guix.html#Proceeding-with-the-Installation][cow-store]] 服務：掛載外部文件系統到 /gnu/store，這樣對其寫入也就不會影響內存了。本文附錄附有[[id:0bb89168-51bc-4a9a-ba66-e40197c21fa1][手動實現 cow-store 流程]]。

安裝過程可能因爲網絡問題失敗，不過已經下載好的內容之後不會重複下載，所以失敗了也請放心，重試就好。

爲了方便在新系統中使用，可以把 [[id:c001599b-9683-4cbd-b88c-71ac0170b79f][Guix System]] 的配置文件放進安裝路徑：
#+begin_src shell
  # /etc/guix 會存儲私鑰，所以有權限要求
  mkdir --mode=0511 --parents /mnt/etc/guix
  cp {,/mnt}/etc/config.scm
#+end_src

至此安裝流程結束，可以重啓了。

** 安裝之後
啓動後會需要輸入兩次 LUKS 分區密碼，至於原因參見附錄[[id:93f8a9c7-aa95-49e6-bbaf-642303d1ae72][啓動流程]]。

*** 設置用戶密碼
完成啓動後會進入 GDM 登錄介面，不過由於還沒有設置密碼，此時登錄介面中並無用戶可選。

Ctrl+Alt+F1 進入控制檯，以 root 登錄，可以直接登入。

爲用戶設置密碼：
#+begin_src shell
  passwd myuser
#+end_src

登入用戶，驗證 sudo 正常工作後再登出用戶：
#+begin_src shell
  su --login myuser
  sudo echo
  logout
#+end_src

鎖定 root 賬戶，再登出 root。
#+begin_src shell
  password --lock root
  logout
#+end_src

Ctrl+Alt+F7 回到登錄介面，現在就有用戶了，輸入密碼進入桌面。

*** 接下來？
先前[[id:b2af2d28-1831-41f4-8455-a8746778cd4a][安裝]]時已將頻道配置文件放到 /etc/guix/channels.scm，所以可以接收更新了。
#+begin_src shell
  guix pull
#+end_src

重新設置系統的命令如下，只需要一個配置文件路徑，對其路徑和名稱沒有要求：
#+begin_src shell
  sudo guix system reconfigure /etc/config.scm
#+end_src

Guix 的 sudo 會保留 PATH 環境變量，也就是說 =sudo guix= 會正確使用當前用戶的 Guix，當然初次使用最好還是確認 guix 命令指向 ~/.config/guix/current/bin/guix。

此外建議將系統配置文件存放到版本控制系統。

附錄中也包含了 [[id:4d1c0306-0deb-4666-9252-068cf1425963][GNU Shepherd 使用說明]]。

參考手冊中包含的內容可能比想象中還要多，可以從 [[https://guix.gnu.org/manual/devel/en/guix.html#Getting-Started][Getting Started]] 這一節開始。

最後的最後，附圖一張。

Happy hacking！

![[file:gnome-on-guix.png][Guix System 上的 GNOME 桌面環境]]

** 附錄
*** 列表操作
:PROPERTIES:
:ID:       3322285f-9639-4807-9fd4-b606374fd8f0
:END:
這裏提供一些列表操作的例子，我在配置文件中只使用了 list 和 append，不過 GNU Guix 參考手冊中也有用到 cons，雖說 Guix 手冊中代碼部分都有超鏈接到 GNU Guile 參考手冊，但初見可能不太直觀，所以我也一併做個並不準確的解釋：

#+begin_src scheme
  ;; list 從任意個元素創建一個列表
  (list)                                  ; ()
  (list 1)                                ; (1)
  (list 1 2)                              ; (1 2)
  (list 1 2 3)                            ; (1 2 3)

  ;; append 將任意個列表追加爲一個
  (append)                                ; ()
  (append (list 1))                       ; (1)
  (append (list 1) (list 2))              ; (1 2)
  (append (list 1) (list 2) (list 3))     ; (1 2 3)

  ;; cons 將一個元素放到一個列表頭部
  (cons 0 (list      ))                   ;       (0)
  (cons 1 (list     0))                   ;     (1 0)
  (cons 2 (list   1 0))                   ;   (2 1 0)
  (cons 3 (list 2 1 0))                   ; (3 2 1 0)

  ;; cons* 將任意個元素放到一個列表頭部
  (cons*       (list 0))                  ;       (0)
  (cons*     1 (list 0))                  ;     (1 0)
  (cons*   2 1 (list 0))                  ;   (2 1 0)
  (cons* 3 2 1 (list 0))                  ; (3 2 1 0)

  ;; 假設要構造 (bash coreutils findutils grep) 這樣一個列表，以下爲幾種可能：
  (list bash coreutils findutils grep)

  (append (list bash) (list coreutils findutils) (list grep))

  (cons bash (list coreutils findutils grep))

  (cons* bash coreutils findutils (list grep))
#+end_src

*** cow-store
:PROPERTIES:
:ID:       0bb89168-51bc-4a9a-ba66-e40197c21fa1
:END:
以下爲 cow-store 手動實現：
#+begin_src shell
  # 先前在 /mnt 路徑掛載了外部文件系統，所以就在這個路徑操作。
  target=/mnt

  tmpdir=$target/tmp
  rw_dir=$tmpdir/guix-inst
  work_dir=$rw_dir/../.overlayfs-workdir

  mkdir --parents $tmpdir
  mkdir --parents $rw_dir
  mkdir --parents $work_dir

  # Guix 的構建發生在 /tmp，構建時可能會有較多佔用，所以將外部文件系統上的目錄掛載過去。
  mount --bind $tmpdir /tmp

  # rw_dir 會被用作 /gnu/store，而 /gnu/store 有特殊權限要求。
  chown 0:30000 $rw_dir
  chmod 1775 $rw_dir

  # 創建一個 OverlayFS，包含 /gnu/store 和 rw_dir 的內容，寫入這個文件系統會寫進 rw_dir。
  # 掛載到 /gnu/store。
  mount --types=overlay \
        --options=lowerdir=/gnu/store,upperdir=$rw_dir,workdir=$work_dir \
        none /gnu/store
#+end_src

手動實現 cow-store 後若要抵消操作：
#+begin_src shell
  # 卸載先前從外部文件系統掛載的 /tmp
  umount /tmp

  # 卸載先前掛載的 OverlayFS
  umount /gnu/store
  # 刪除先前向 OverlayFS 寫入的文件
  rm --recursive $rw_dir

  # /gnu/store 的內容由數據庫索引，gc --verify 會驗證 /gnu/store，從而清理對不存在內容的索引。
  guix gc --verify
#+end_src

*** 啓動流程
:PROPERTIES:
:ID:       93f8a9c7-aa95-49e6-bbaf-642303d1ae72
:END:
UEFI 系統中使用 GRUB 作爲引導加載器時，GNU/Linux 啓動流程大致如下：
#+begin_example
  UEFI -> GRUB（核心鏡像 -> 配置文件 + 模塊）-> Linux + initrd -> PID 1
#+end_example

UEFI 標準支持使用 FAT 文件系統的 EFI 系統分區，所以 GRUB 核心鏡像要被安裝到這樣一個文件系統。

GRUB 採用模塊化設計，在安裝時會需要指定啓動目錄（默認爲 /boot），用以安裝配置文件和模塊。
同時，提供啓動目錄所在文件系統支持的模塊也會被放進核心鏡像中，這是爲了保證 GRUB 核心鏡像能夠讀取到自己的配置文件。

在我的系統中，GRUB 的啓動目錄在 LUKS 分區（LUKS2 格式）上的 Btrfs 文件系統，所以 GRUB 核心鏡像中需要同時有 LUKS2 和 Btrfs 支持。而讀取配置文件前需要先解密其所在分區，這就是開機時第一次密碼輸入。

GRUB 的配置文件包含啓動 Linux 內核的條件：Linux 內核與 initrd 路徑，以及啓動參數。自然，GRUB 必須支持內核和 initrd 所在的文件系統，對於 Guix System 來說，就是 /gnu/store 所在的文件系統。

Linux 內核也是採用模塊化設計，initrd 裏放了啓動過程中需要的模塊，內核啓動後會解壓 initrd 並運行其中的 init 程序，這個 init 程序負責掛載 =/= 和其他在配置中標記爲啓動時需要的文件系統，創建根文件系統中的剩餘部分，最後運行 PID 1，在 Guix System 中也就是 GNU Shepherd，自此結束啓動流程。

initrd 中的 init 程序負責掛載 =/= ，由於我的 =/= 也在 LUKS 分區，需要先解密，這也就是開機時第二次密碼輸入。

在 Guix System 的啓動流程中，需要注意的問題主要和 GRUB 有關：
1. GRUB 需要支持 /boot 和 /gnu/store 所在的文件系統。
2. GRUB 目前不支持 Argon2，所以沒有完整的 LUKS2 支持。
3. Guix 並沒有干預 GRUB 核心鏡像的生成，最後安裝的核心鏡像會使用 QWERTY 鍵盤佈局。

對於第一點，不需要太多考慮，第二點可以由[[id:4914f342-995a-4821-a1c3-e2382c834d35][前述]]支持 Argon2 的 GRUB 變體解決。

至於第三點，日常在 GRUB 中輸入的機會不多，主要可能是在解密 LUKS 分區時輸入密碼，所以可以爲 LUKS 分區設置兩個密碼：一個用需要的鍵盤佈局，另一個用 QWERTY，兩者使用相同按鍵。當然最好是讓 Guix 干預 GRUB 核心鏡像生成，從根本上解決問題，但這是之後的事了。

*** GNU Shepherd 使用說明
:PROPERTIES:
:ID:       4d1c0306-0deb-4666-9252-068cf1425963
:END:
Shepherd 包含四個程序：
+ shepherd：運行服務，監聽 socket。
+ herd：連接 socket，控制 shepherd。
+ halt：連接 socket，關機。
+ reboot：連接 socket，重啓。

Shepherd 在認證上依賴文件系統的權限管理能力。比如 Guix System 的 Shepherd，socket 在 /var/run/shepherd/socket，socket 的權限是 0755，其所在目錄則爲 0700。

連接到 socket，就能控制 Shepherd，所以 halt、reboot、用 herd 連接系統 Shepherd 都需要 sudo。

herd 的語法爲： =herd ACTION [SERVICE [OPTIONS...]]=

=herd status= 顯示指定 Shepherd 服務狀態信息，省略服務時則顯示自身信息，Shepherd 自身也叫 root 服務，所以 =herd status root= 會輸出相同結果，如下（有省略）：
#+begin_example
  Started:
   + bluetooth
   + file-systems
   + guix-daemon
   + root
   + root-file-system
  Running timers:
   + log-rotation
  One-shot:
   ,* host-name
   ,* user-homes
#+end_example

常規服務狀態信息格式不同，如 =herd status dbus= ：
#+begin_example
  ● Status of dbus:
    It is running since Fri 27 Dec 2024 01:04:52 PM HKT (25 hours ago).
    Main PID: 3151
    Command: /gnu/store/r799iglam0gk9q35j56239wcdg9xzhwg-dbus-1.15.8/bin/dbus-daemon --nofork --session --address=unix:path=/run/user/1000/bus
    It is enabled.
    Provides: dbus
    Will be respawned.
    Log file: /home/hako/.local/state/shepherd/dbus.log

  Recent messages (use '-n' to view more or less):
    2024-12-27 13:05:14
    2024-12-27 13:05:14 ** (/gnu/store/cnjrzbqf9rm48q2v3r60pr3qm45n94pg-xdg-desktop-portal-1.16.0/libexec/xdg-desktop-portal:4004): WARNING **: 13:05:14.643: Failed to load RealtimeKit property: GDBus.Error:org.freedesktop.DBus.Error.ServiceUnknown: The name org.freedesktop.RealtimeKit1 was not provided by any .service files
    2024-12-27 13:05:14 dbus-daemon[3151]: [session uid=1000 pid=3151 pidfd=4] Activating service name='org.freedesktop.impl.portal.desktop.wlr' requested by ':1.12' (uid=1000 pid=4004 comm="/gnu/store/cnjrzbqf9rm48q2v3r60pr3qm45n94pg-xdg-de")
    2024-12-27 13:05:14 dbus-daemon[3151]: [session uid=1000 pid=3151 pidfd=4] Successfully activated service 'org.freedesktop.impl.portal.desktop.wlr'
    2024-12-27 13:05:14 dbus-daemon[3151]: [session uid=1000 pid=3151 pidfd=4] Successfully activated service 'org.freedesktop.portal.Desktop'
#+end_example

=herd log= 或 =herd log root= 顯示服務的狀態變化記錄：
#+begin_example
  23 Feb 2024 15:01:17    service root is being started
  23 Feb 2024 15:01:17    service root is running
  23 Feb 2024 15:01:17    service pipewire is being started
  23 Feb 2024 15:01:17    service pipewire is running
  23 Feb 2024 15:01:17    service wireplumber is being started
  23 Feb 2024 15:01:17    service wireplumber is running
  23 Feb 2024 15:01:17    service mcron is being started
  23 Feb 2024 15:01:17    service mcron is running
  23 Feb 2024 15:01:17    service gpg-agent is being started
  23 Feb 2024 15:01:17    service gpg-agent is running
  23 Feb 2024 15:01:17    service dbus is being started
  23 Feb 2024 15:01:17    service dbus is running
#+end_example

其餘基礎操作爲 =herd start <服務>= 、 =herd stop <服務>= 、 =herd restart <服務>= 、 =herd enable <服務>= 和 =herd disable <服務>= ，分別爲啓動、停止、重啓、啓用、禁用服務。重啓服務的邏輯是停止服務 + 啓動服務，所以重啓 root 服務是不可能的，下爲 =herd restart root= 輸出：
#+begin_example
You must be kidding.
#+end_example

=herd doc= 顯示服務描述，例如 =herd doc root= 結果如下：
#+begin_example
  The root service is used to operate on shepherd itself.
#+end_example

=herd doc <服務> list-actions= 則可列出指定服務的自定義操作，如 =herd doc guix-daemon list-actions= ：
#+begin_example
  set-http-proxy:
    Change the HTTP(S) proxy used by 'guix-daemon' and restart it.

  discover:
    Enable or disable substitute servers discovery and restart the
  'guix-daemon'.
#+end_example

自定義操作在 =herd status= 輸出中亦有列出，下爲 =herd status guix-daemon= 結果，注意「Custom actions」一欄：
#+begin_example
  ● Status of guix-daemon:
    It is running since Fri 27 Dec 2024 11:18:03 AM HKT (27 hours ago).
    Main PID: 1231
    Command: /gnu/store/2j1d7mhackfhs8d80pv0iv7h4l5g4jc2-guix-1.4.0-30.790c9ff/bin/guix-daemon --build-users-group guixbuild --max-silent-time 3600 --timeout 86400 --log-compression gzip --discover=no --substitute-urls "https://bordeaux.guix.gnu.org https://ci.guix.gnu.org https://substitute.boiledscript.com https://substitutes.nonguix.org"
    It is enabled.
    Provides: guix-daemon
    Requires: user-processes
    Custom actions: set-http-proxy discover
    Will be respawned.
    Log file: /var/log/guix-daemon.log

  Recent messages (use '-n' to view more or less):
    2024-12-28 13:18:35 spurious SIGPOLL
    2024-12-28 13:18:35 spurious SIGPOLL
    2024-12-28 13:19:09 spurious SIGPOLL
    2024-12-28 13:31:34 accepted connection from pid 13989, user hako
    2024-12-28 14:24:45 accepted connection from pid 20569, user hako
#+end_example

** 參考
+ [[https://en.wikipedia.org/wiki/Booting_process_of_Linux][Booting process of Linux - Wikipedia]]
+ [[https://en.wikipedia.org/wiki/Disk_encryption_theory][Disk encryption theory - Wikipedia]]
+ [[https://gitlab.com/cryptsetup/cryptsetup/-/wikis/FrequentlyAskedQuestions][Frequently Asked Questions Cryptsetup/LUKS - cryptsetup Wiki]]
+ [[https://guix.gnu.org/manual/devel/en/guix.html][GNU Guix Reference Manual]]
+ [[https://sockpuppet.org/blog/2014/04/30/you-dont-want-xts/][You Don't Want XTS — Quarrelsome]]
+ [[https://wiki.archlinux.org/title/Dm-crypt/Device_encryption][dm-crypt/Device encryption - ArchWiki]]
+ [[https://www.kernel.org/doc/html/latest/admin-guide/initrd.html][Using the initial RAM disk (initrd) - The Linux Kernel documentation]]

#+begin_quote
題圖攝於 2024 初春。
#+end_quote

[fn:1] Btrfs，zstd 壓縮，壓縮等級爲預設（即 3），非強制壓縮。
[fn:2] 引導加載器配置包含（依賴）Linux 內核、initrd 及啓動參數，啓動參數又依賴用作 PID 1 的程序。正好是操作系統存在的充分條件。

* DONE 二〇二三 - 輾轉                                        :年終:@usual:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: the-4th-year
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image cover.jpg :toc false
:ID:       dc93677d-8726-422c-ac68-7cbbc85466cf
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-12-31 Sun 23:38]
:END:
#+begin_description
總而言之，這就是 20 歲的「年終」了。
#+end_description

因爲上學這種相當無趣的原因，我不得不注意起時間來。所以今年的這一篇比起先前寫得要稍早些。

我總感覺，既然年終的紀錄已經有 17 歲的[[id:1a498db4-80ff-47ec-9d2d-9c10c05139af][尾聲]]和 19 歲的[[id:93bda719-69ca-46dd-8ae7-3baf71b79005][略寫]]，那接下來該在 21 歲了吧？但要是等到了那個時候還把他當成慣例寫下來，豈不是太無聊了？

不過那還是未來，而我現在也能寫。總而言之，這就是 20 歲的「年終」了。

** 冬
:PROPERTIES:
:ID:       488ed9b9-649d-4c4e-8543-6c259c503f54
:END:
年初曾有過兩次出行，過程中也有開心的時刻，然而我對出行本身還是感受不佳，我不清楚自己是否還適合了。

儘管去年末「理解每一步操作」的系統設置嘗試因爲染病草草了結，那時完成的系統如今還在使用。今年用相似的方式設置了 YubiKey 和 GnuPG，因而有了當前的 OpenPGP 密鑰。我也整理好了自己的[[https://github.com/rakino/Testament][配置文件]]。

此外看了 /[[https://www.onepiece-film.jp/][ONE PIECE FILM RED]]/ ，雖說翻譯帶有審查痕跡實在令人不爽，但總算是搞清楚去年紅白出現的 +奇怪+ 形象到底是什麼了。因爲很少進城而且交通時間較長，我比較少去電影院，上一次或許還是『[[https://violet-evergarden.jp/sidestory/][ヴァイオレット・エヴァーガーデン 外伝 - 永遠と自動手記人形 -]]』，在 2020 年一月初。

** 春
今年又開始看漫畫了，主要是藤本タツキ的作品。因爲有趣所以看得比較多，也就……容易忘。

高考前剩下的流程，也都在這個季節完成。我雖然離開了「學校」，但對曾有的高中「生活」印象並不差，可惜只能以每次進入學校都愈加強烈的陌生感作結了。

在春天的後半開始遊玩『[[https://p5r.jp/][ペルソナ5 ザ・ロイヤル]]』，玩起這遊戲感覺我的人生像是有救了一樣。我從第一次遊玩開始，用了兩週計 125 小時完成主線。

遊玩 P5R 的經驗說明我去年關於遊戲進度緩慢的想法並不靠譜——我大概並不是在追求完滿的結果，只是玩的遊戲確實讓我感到無聊。這也意味着我註定會在結束 P5R 後消沉下去，直到兩週以後『[[https://p5s.jp/][ペルソナ5 スクランブル ザ ファントム ストライカーズ]]』打折才振作起來。

感受着同屏幕內暑假相襯的溫度，春天就在 90 小時的 P5S 遊玩中結束了。

** 夏
結束了 /[[https://www.ea.com/games/titanfall/titanfall-2][Titanfall 2]]/ 戰役部分，玩 FPS 遊戲實在痛苦，便不再繼續了。

然後就是高考了。不過我待在學校的時間還不及三分之一，所以除了前述「陌生感」，以及考場桌椅坐着難受以外，沒有什麼可說。我也會想，我造成的麻煩已經夠多了，也許我並不該報名高考？但沒有辦法，我沒有更好的選擇了。

無論如何，我不再是高中生了。

在夏天的末尾——初次設置博客的四年以後，又思考了博客的[[https://github.com/rakino/ultrarare.space][構成]]，這次要乾淨不少。

** 秋
發現自己或許患有 ADHD，我從來沒有想過這種情況，但一以此解釋，許多異常都合理了起來。然而如今已不是瞭解這點的時機，我並不打算進一步確認。

受助於幾位可愛的存在，我成爲了 GNU Guix 的 committer。說來慚愧，考慮到我最初產生這個想法的理由，我還沒有做好這個角色，責任也好期待也罷都承擔得比較艱難。不過這是我沒有做過的事，嘗試改善這種處境或許正是「破除死局的鑰匙」，來年加油吧。

一整年都有在緩慢推進的 /[[https://www.platinumgames.com/games/nier-automata][NieR:Automata]]/ 總算到了 Final Wish。可惜因爲系統設置，遊玩這段時並未存上檔，而我後來每次在遊戲中都會掉進坑裏爬不出來，這 Final Wish 終究難以如願，我便將其擱置了。

結束了 /[[http://stage-nana.sakura.ne.jp/narcissu.htm][narcissu]]/ ，這是我結束的第一部視覺小說。

** 初冬
經三年之久，終於結束了『[[https://sukerasparo.com/amrilato/index.html][ことのはアムリラート]]』，這是我遊玩的第一部視覺小說。

** 另
今年博客新增《[[id:c7fe3c00-71a4-4345-b3e1-3f8536df135e][夜遊]]》和《[[id:faf5bcf6-7626-4eaa-8d64-cde667ffd25c][按條件加載 Git 配置]]》兩篇，完成度都不高。前者原本記錄於 2019 年 8 月，如今出現算是爲了迴應略寫中提到的「整理」，不過我缺乏寫作練習，很久沒有嘗試寫過什麼了，不知道再次修改會在什麼時候。

我居然快到 21 歲了啊。

Happy New Year.

#+begin_quote
題圖攝於 2023 夏，高考後。
#+end_quote

* DONE 按條件加載 Git 配置                                     :Git:@notes:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: load-git-config-conditionally
:ID:       faf5bcf6-7626-4eaa-8d64-cde667ffd25c
:END:
:LOGBOOK:
- State "DONE"       from "DOING"      [2023-11-20 Mon 20:19]
- State "DOING"      from "DONE"       [2023-11-20 Mon 20:04] \\
  Expand explanation of include.path.
- State "DONE"       from "DOING"      [2023-11-20 Mon 19:45]
- State "DOING"      from "DONE"       [2023-11-20 Mon 19:45] \\
  Remove cover.
- State "DONE"       from "DOING"      [2023-11-15 Wed 14:41]
- State "DOING"      from "DONE"       [2023-11-15 Wed 13:07] \\
  Reword.
- State "DONE"       from "BUG"        [2023-08-25 Fri 11:57]
- State "BUG"        from "DONE"       [2023-08-25 Fri 11:57]
- State "DONE"       from "TODO"       [2023-08-25 Fri 01:49]
:END:
#+begin_description
git-config(1): Conditional includes.
#+end_description

** 緣起
我的 Git 設置有要求對 commit 簽名，然而在 OpenPGP 智能卡方面卻又有每次簽名必須單獨驗證的設置。這對改動不多，在本地就能保證線性歷史的倉庫來說還好，但是對需要頻繁 cherry-pick + rebase 的就難說了。

雖然可以在倉庫內關掉簽名要求，但發佈時還是得保證簽名，爲此臨時手動開關選項稍有些麻煩，而我也無法說服自己調整智能卡設置就是了。

所以得找一個折中方案，能直接想到的是：
1. 仍然默認要求簽名。
2. 針對特定倉庫關閉簽名要求，並在其中設置一個要求簽名的分支（就叫 outgoing 吧）。

不過我不清楚第二點該如何完成，所幸搜索到了 Git 設置中 includeIf 的例子。

** RTFM
在 Git 中有兩種從其他來源加載配置文件的方法，其中之一是 include，需要在 path 選項中指定配置文件路徑，例如：
#+begin_src conf
  [include]
          path = ../etc/git/gitconfig
#+end_src

include 的 path 選項指定的路徑是相對於配置所在的文件的。比如在 .git/config 中加入上述配置，就會加載 etc/git/gitconfig（.git/../etc/git/gitconfig）。

如果 etc/git/gitconfig 裏也有這段呢？那就會再加載 etc/etc/git/gitconfig（etc/git/../etc/git/gitconfig）。

另一種方法就是 includeIf 了，同前者一樣包含 path 選項，只不過除此以外還需要一個條件，只有滿足條件後纔會加載 path 中指定的配置文件。條件有很多種[fn:1]，而我想要指定「切出要求簽名的分支（比如前面提到的 outgoing）時」，所以用到了 onbranch。寫出來像是這樣：
#+begin_src conf
  [includeIf "onbranch:outgoing"]
          path = ../etc/git/gitconfig
#+end_src

** 結果
因此在需要設置的倉庫中如下操作即可：
#+begin_src shell
  # 關閉簽名要求
  git config commit.gpgsign false

  # 切出 outgoing 分支時讀取配置文件 outgoing
  git config includeIf.onbranch:outgoing.path outgoing

  # 在配置文件 .git/outgoing 中要求簽名
  git config -f .git/outgoing commit.gpgsign true
#+end_src

生成的 Git 配置文件：
#+begin_src conf
  # .git/config，有省略：
  [commit]
          gpgsign = false
  [includeIf "onbranch:outgoing"]
          path = outgoing
  # .git/config 在此結束。
#+end_src

#+begin_src conf
  # .git/outgoing：
  [commit]
          gpgsign = true
  # .git/outgoing 在此結束。
#+end_src

[fn:1] 詳細參見 =man 1 git-config= 或 =info "(gitman) git-config"= 中 Conditional includes 部分。

* DONE 夜遊                                                        :@usual:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: rush
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image cover.png :toc false
:ID:       c7fe3c00-71a4-4345-b3e1-3f8536df135e
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-08-02 Wed 01:38]
:END:
#+begin_description
匆匆之間的囈語，留到了來年的來年。
#+end_description

** 教學樓
我還是同往常一樣望向外邊。目之所及，建築、樹葉、路徑，都充斥昏黃光線。「黃昏」，名副其實。

只不過，是在學校。

教學樓內還上着課，路上並無行人，只我一人遊離。我雖不必趕到，但在此時也只是想着，「我並不慌張，我本就不慌張」。

** 商店
課時未滿，夜卻先行壓下，冷寂得很。漸發無聊之餘，記起校內似有商店，我盯向印象處，但在夜下此時，也只是依稀可見。雖說前程十分黯淡，只有一條路的話倒也不足爲懼，順着走就是了。

靠近纔察覺有光亮自彼端商店散發，甚至該說亮得有些過分。先前的擔心大概並不要緊，身上些許夜色也卸下了。只不過進店後才自覺來錯了地方，貨物豐富，卻並沒有我想要的。我不理解，但也只是前往來路，儘管光亮有些難以褪去。

空手而歸，藉着感覺一路回去。待到再度適應明暗，商店也已淡出視野。

** 幽徑
我並不確信自己是適應了——「明暗」——睜開雙眼，卻看不見任何東西——如果真的沒有光，什麼能叫作明暗？

我在哪？轉身？行進？我，在哪？

……

經驗而言，即便閉上雙眼，也該能察覺到明暗纔對。但我不知道，如果有一天發現這一切都不對，該怎麼做。

……

走吧，死或是見到光。

** 軌道
時間、視角，諸如此類的概念意義消退。

而我見到了光。

視角未知，方向未知，但我察覺到了，星星點點，幽藍的，光。

發散而不消退，飄浮卻非遊離。一條延伸至視野外的軌道，幽藍着。

……

我有了新的渴望。挪往軌道，緊緊抓住，往看不見的地方一點點攀援。

** 花野
星星點點幽藍的光芒，原來也會淡去。只不過突然亮起的天空，更令我費解。

花，有很多花。鐵軌，在花間。枕木，貼着手心。頭頂上，是另一根枕木。

起身，看見不遠處小屋上的「大車站」字樣，環望鐵路四周，沒有任何防護措施。我邁向了小屋。

** 列車
我並不知道這趟列車從哪裏開來，又駛往何方。但我還是上去了，我沒有確證，但相信此行會更加漫長。

劇烈顛簸驚擾了我的困頓，列車墜下了山崖。

#+begin_quote
題圖由 AI 生成，於 2022 晚秋。
#+end_quote

* DONE 二〇二二 - 略寫                                        :年終:@usual:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: twenty-twenty-too
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image cover.jpg
:ID:       93bda719-69ca-46dd-8ae7-3baf71b79005
:END:
:LOGBOOK:
- State "DONE"       from "DOING"      [2023-11-15 Wed 14:52]
- State "DOING"      from "DONE"       [2023-11-15 Wed 13:26] \\
  reword
- State "DONE"       from "BUG"        [2023-01-09 Mon 16:11]
- State "BUG"        from "DONE"       [2023-01-09 Mon 16:11]
- State "DONE"       from "TODO"       [2023-01-01 Sun 22:47]
:END:
#+begin_description
些許無聊印象。
#+end_description

同 20 年放學歸家[[id:1a498db4-80ff-47ec-9d2d-9c10c05139af][略有睏倦]]，及 21 年下班後筋疲力盡相比，22 年的最後一天還算輕鬆：我只是賦閒在家，亦餘有心力觀察路面橫行滑翔的大鵝。

過去一年事件極多，若僅以「有趣」一詞描述，恐怕過分淺薄了。然而言語匱乏如我，在此也只能留些無聊印象罷了。

** 2022 年做了些什麼？
與過往最有聯繫的，應該是離開了（遊戲以外）絕大部分的商業應用服務，以至這次唯一收到的 +跟蹤報告+ 年度回顧還是來自 Steam[fn:1]。此外，思及年份更替，這一年我似乎是靠着 SNS 才知曉「新年將至」的，這點很有意思。

至於書籍影音，21 年底購入的漫畫、輕小說，甚至更早購入的一些作品都還沒開始看……動畫進度尚停滯在 22 年四月新番，遑論往年新番了。

遊戲方面，除新作 /[[https://stray.game/][Stray]]/ 完成了主線外[fn:2]，仍是往年舊作的緩慢推進與重開循環。

這年雖幾乎沒有私人信件往來，電子信箱中卻多出了大量信件。初次接觸 e-mail 協作流程就是 Linux，可說是相當幸運了[fn:3]……爲 GNU Guix 提交補丁過程中，也向査読者學習了許多。大約是拜 [[https://guix.gnu.org/en/manual/devel/en/guix.html][Guix 參考手冊]]所賜，長篇文檔的閱讀體驗也好了不少。

此外還有失業以及高中升學考試前的手續流程之類，就不必詳談了。

跨年方面，第一次看了東九區的紅白。對東八區的傢伙而言，還能留出一小時餘地，可真是便利啊。

** 至於 2023……
一如既往，只求今年能夠實現。
+ 數據存檔
+ 整理所學
+ 整理過去文字

🎉 Happy New Year!

#+begin_quote
題圖攝於 2022 夏至。
#+end_quote

[fn:1] 就數據來看，我的遊戲高峯正好是在冬夏兩季。
[fn:2] 能完成 /Stray/ 很大程度上是因爲其完整流程僅在 12 小時內，然而「12 小時」的預估對於兩小時就能結束的遊戲還是太多了……恐怕我對於遊戲有着和博客相似的態度——想要完成，卻畏懼着並不完滿的結果。
[fn:3] Linux 文檔對此有詳盡指導： /[[https://docs.kernel.org/process/submitting-patches.html][Submitting patches: the essential guide to getting your code into the kernel]]/

* DONE 二〇二〇 - 尾聲                                        :年終:@usual:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: end-of-2020
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image cover.jpg
:ID:       1a498db4-80ff-47ec-9d2d-9c10c05139af
:END:
:LOGBOOK:
- State "DONE"       from "DOING"      [2023-01-01 Sun 23:22]
- State "DOING"      from "DONE"       [2022-12-31 Sat 14:21]
- State "DONE"       from "TODO"       [2021-01-01 Fri 00:00]
:END:
#+begin_description
在長久的悲哀中，2020 年還是到了他的盡頭。
#+end_description

放學後耽擱了一些時間，啓程回家又因爲道路施工，遭遇了相當程度的交通阻塞。在 2020 年的最後一天，我直到晚上七點才終於回到了家裏。

伴隨着因爲網絡問題終止的棋局，以及終究還是結束了的通話，我又回到了某種孤獨的狀態。仍未取回行李的我，獨自檢視着這個因爲在 /tmp/home 居住時間加長而慢慢變得陌生的家。

待到洗漱完畢，又看了幾個時節無關的視頻後，SNS 上開始響起許多慶祝新年的聲音。想着「也許我也該發點什麼慶祝一下？」於是在臨近十一點的時候，我開始了對 ChainSay[fn:1] 的設置。

#+begin_quote
「由於實在想不出來該發什麼所以趕緊給 ChainSay 加幾個符號順便（偷懶）搭配 lolcat 看看」（2020-12-31 22:40 UTC+8）
#+end_quote

最後所做基本如上計劃所述，添加符號、修改操作方式，色彩方面交給 [[https://github.com/busyloop/lolcat][lolcat]]，再爲了留住 =lolcat -a= 的動畫效果用到 [[https://asciinema.org][asciinema]] 錄製終端會話，又爲了將錄製結果轉爲 GIF 圖像編譯了 [[https://github.com/asciinema/asciicast2gif][asciicast2gif]]……

到 11:50 PM 左右，我才搞定這一切，結果尷尬地發現 Mastodon 並不支持上傳這樣分辨率的 GIF 圖像！好在還能想起圖牀這種替代方案……我終於趕在新年第一分鐘發出了「Happy New Year!」那張圖片。

![[file:new-year-style1.png][「風格 1」，其中「1609459200」爲 UNIX 時間的 2021 年 1 月 1 日 0 時 0 分。]]
![[file:new-year-style2.png][「風格 2」，爲 Python 代碼，不過因爲 ChainSay 的緣故轉成了大寫有些怪怪的……]]

![[file:new-year.png][Happy New Year!]]

就這樣，東八區的二〇二〇年，結束了。

#+begin_quote
題圖攝於 2019 初冬。
#+end_quote

[fn:1] ChainSay 大概是我第二個比「Hello World」複雜的程序。該程序應當最初實現于 2018 年秋季的假期，具體效果參見下文圖片，不過顏色部分是由 lolcat 完成的。

* DONE My First Post
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_BUNDLE: first-post
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image cover.jpg
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-06-30 Sun 18:00]
:END:

Hello world! I’ve set up my site!

#+begin_quote
題圖攝於 2019 初夏。
#+end_quote
